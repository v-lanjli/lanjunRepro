{
	"name": "notebook_for_sql",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "large",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2
		},
		"metadata": {
			"language_info": {
				"name": "sql"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/051ddeca-1ed6-4d8b-ba6f-1ff561e5f3b3/resourceGroups/bigdataqa/providers/Microsoft.Synapse/workspaces/bigdataqa0407/bigDataPools/large",
				"name": "large",
				"type": "Spark",
				"endpoint": "https://bigdataqa0407.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/large",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"def willfail(): Unit =\n",
					"    throw new RuntimeException(\"123\")\n",
					"\n",
					"willfail()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"// CELL 1 - command to set the blob storage account connection\n",
					"val scalasecret = \"L/ekx9fLBxq+4AD1HAEE5sirGU14O2n5i/gyFCtNfzMwk2CWvIsvZ08c9ETP0pSo/H5Vo2NJY2foCgHs6xwLIw==\";\n",
					"spark.conf.set(\"fs.azure.account.key.ruxuspark04.blob.core.windows.net\", scalasecret)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"// CELL 2 - read a JSON file as Spark DataFrame\n",
					"val blobcontainer = \"wasbs://ruxuspark04-2019-04-26t09-39-20-935z@ruxuspark04.blob.core.windows.net\"\n",
					"val blobpath = \"/example/data/people.json\"\n",
					"val jsonFile = spark.read.json( blobcontainer + blobpath)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"source": [
					"// CELL 3 - save Spark DataFrame as Parquet file, maintaining the schema information \n",
					"jsonFile.write.parquet(\"people.parquet\")"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"source": [
					"// CELL 4 - the parquet file created above as Spark DataFrame\n",
					"val parquetFileDF = spark.read.parquet(\"people.parquet\")"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"source": [
					"// CELL 5 - create a temporary view and which is used in subsequent SparkSQL statements\n",
					"parquetFileDF.createOrReplaceTempView(\"parquetFile\")"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"source": [
					"// CELL 6 - filter people with age between 20 to 40 \n",
					"val namesDF = spark.sql(\"SELECT name FROM parquetFile WHERE age BETWEEN 20 AND 40\")\n",
					"namesDF.map(attributes => \"Name: \" + attributes(0)).show()"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"source": [
					"%%sql\n",
					"\n",
					"SELECT * FROM parquetFile WHERE true"
				],
				"execution_count": 11
			}
		]
	}
}